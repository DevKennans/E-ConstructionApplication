@model EConstructionApp.WebUI.Areas.Admin.Models.TaskViewModel

@{
    ViewData["Title"] = "Active Tasks";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2 class="text-center mt-4">🚀 Active Tasks</h2>

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show text-center" role="alert">
        @TempData["ErrorMessage"]
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show text-center" role="alert">
        @TempData["SuccessMessage"]
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}

@if (Model == null || Model.Tasks == null || !Model.Tasks.Any())
{
    <div class="alert alert-warning text-center">
        No active tasks found.
    </div>
}
else
{
    <div class="container mt-4">
        <div class="row">
            @foreach (var task in Model.Tasks)
            {
                <div class="col-md-6 mb-4">
                    <div class="card task-card shadow-sm h-100 d-flex flex-column">
                        <div class="card-header bg-primary text-white">
                            <h5 class="mb-0">@task.Title</h5>
                        </div>
                        <div class="card-body d-flex flex-column">
                            <p class="text-muted">@task.Description</p>

                            <div class="task-info">
                                <p><strong>📌 Assigned By:</strong> @task.AssignedBy</p>
                                <p><strong>📱 Phone:</strong> @task.AssignedByPhone</p>
                                <p><strong>📧 Email:</strong> @task.AssignedByEmail</p>
                                <p><strong>🏠 Address:</strong> @task.AssignedByAddress</p>
                                <p><strong>⏳ Deadline:</strong> @task.Deadline</p>
                                <p><strong>🔥 Priority:</strong> <span class="badge bg-danger">@task.Priority</span></p>
                                <p><strong>⚙️ Status:</strong> <span class="badge bg-success">@task.Status</span></p>
                                <p><strong>💰 Total Cost:</strong> <span class="text-success">$@task.TotalCost.ToString("N2")</span></p>
                            </div>
                            <h6 class="mt-3"><strong>👷 Employees:</strong></h6>
                            @if (task.Employees != null && task.Employees.Any())
                            {
                                <ul class="list-group list-group-flush" style="max-height: 150px; overflow-y: auto;">
                                    @foreach (var employee in task.Employees)
                                    {
                                        <li class="list-group-item">@employee.FirstName @employee.LastName</li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <p class="text-muted">No employees assigned.</p>
                            }

                            <h6 class="mt-3"><strong>🔨 Materials Used:</strong></h6>
                            @if (task.MaterialAssignments != null && task.MaterialAssignments.Any())
                            {
                                <ul class="list-group list-group-flush" style="max-height: 150px; overflow-y: auto;">
                                    @foreach (var material in task.MaterialAssignments)
                                    {
                                        <li class="list-group-item">@material.Material.Name, @material.Material.Category.Name [@material.Quantity]</li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <p class="text-muted">No materials assigned.</p>
                            }

                            <div class="d-flex flex-column mt-auto">
                                <button class="btn btn-primary mb-2 edit-datas-btn"
                                        data-id="@task.Id"
                                        data-title="@task.Title"
                                        data-description="@task.Description"
                                        data-assignedby="@task.AssignedBy"
                                        data-assignedbyphone="@task.AssignedByPhone"
                                        data-assignedbyemail="@task.AssignedByEmail"
                                        data-assignedbyaddress="@task.AssignedByAddress"
                                        data-deadline="@task.Deadline.ToString("yyyy-MM-dd")"
                                        data-priority="@task.Priority"
                                        data-status="@task.Status">
                                    <i class="fas fa-edit"></i> Edit Datas
                                </button>
                                <button class="btn btn-warning mb-2 edit-material-btn" data-material="@task.MaterialAssignments">
                                    <i class="fas fa-box"></i> Edit Material
                                </button>
                                <button class="btn btn-success mb-2 edit-employee-btn" data-id="@task.Id" data-employee='@Html.Raw(Json.Serialize(task.Employees))'>
                                    <i class="fas fa-user-cog"></i> Edit Employee
                                </button>
                            </div>

                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

<div class="modal fade" id="editTaskModal" tabindex="-1" aria-labelledby="editTaskModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editTaskModalLabel">Edit Task</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="addTaskForm" method="post" action="@Url.Action("EditTask", "Task")">
                    <input type="hidden" id="taskId" name="Id">
                    <div class="form-group">
                        <label for="taskTitle">Title</label>
                        <input type="text" class="form-control" id="taskTitle" name="Title" maxlength="250" required>
                        <div class="invalid-feedback">Title is required and cannot exceed 250 characters.</div>
                    </div>
                    <div class="form-group">
                        <label for="taskDescription">Description</label>
                        <textarea class="form-control" id="taskDescription" name="Description" maxlength="1000" required></textarea>
                        <div class="invalid-feedback">Description is required and cannot exceed 1000 characters.</div>
                    </div>
                    <div class="form-group">
                        <label for="taskAssignedBy">Assigned By</label>
                        <input type="text" class="form-control" id="taskAssignedBy" name="AssignedBy" maxlength="200" required>
                        <div class="invalid-feedback">Assigned By is required and cannot exceed 200 characters.</div>
                    </div>
                    <div class="form-group">
                        <label for="taskAssignedByPhone">Assigned By Phone</label>
                        <input type="text" class="form-control" id="taskAssignedByPhone" name="AssignedByPhone"
                               pattern="^\+(\d{1,3})\s?(\d{9,15})$" title="Phone number must be in the format +994553618907" required>
                        <div class="invalid-feedback">Valid phone number is required (e.g., +994553618907).</div>
                    </div>
                    <div class="form-group">
                        <label for="taskAssignedByEmail">Assigned By Email</label>
                        <input type="email" class="form-control" id="taskAssignedByEmail" name="AssignedByEmail" maxlength="150" required>
                        <div class="invalid-feedback">A valid email is required.</div>
                    </div>
                    <div class="form-group">
                        <label for="taskAssignedByAddress">Assigned By Address</label>
                        <input type="text" class="form-control" id="taskAssignedByAddress" name="AssignedByAddress" maxlength="250" required>
                        <div class="invalid-feedback">Assigned By Address is required and cannot exceed 250 characters.</div>
                    </div>
                    <div class="form-group">
                        <label for="taskDeadline">Deadline</label>
                        <input type="date" class="form-control" id="taskDeadline" name="Deadline" required>
                        <div class="invalid-feedback">Deadline is required and must be after tomorrow.</div>
                    </div>
                    <div class="form-group">
                        <label for="taskPriority">Priority</label>
                        <select class="form-control" id="taskPriority" name="Priority" required>
                            <option value="Low">Low</option>
                            <option value="Medium">Medium</option>
                            <option value="High">High</option>
                            <option value="Critical">Critical</option>
                        </select>
                        <div class="invalid-feedback">Priority is required.</div>
                    </div>
                    <div class="form-group">
                        <label for="taskStatus">Status</label>
                        <select class="form-control" id="taskStatus" name="Status" required>
                            <option value="Pending">Pending</option>
                            <option value="Accepted">Accepted</option>
                            <option value="InProgress">InProgress</option>
                            <option value="Completed">Completed</option>
                            <option value="Cancelled">Cancelled</option>
                        </select>
                        <div class="invalid-feedback">Status is required.</div>
                    </div>

                    <button type="submit" class="btn btn-success w-100 mt-3">Save Task</button>
                </form>

            </div>
        </div>
    </div>
</div>



<div class="modal fade" id="editEmployeeModal" tabindex="-1" aria-labelledby="editEmployeeModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editEmployeeModalLabel">Edit Employees</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="editEmployeeForm" method="post" action="@Url.Action("UpdateTaskEmployees", "Task")">
                    <input type="hidden" id="taskEmployeeId" name="TaskId">

                    <!-- New employee button -->
                    <button type="button" id="addEmployeeBtn" class="btn btn-secondary mb-2" onclick="addEmployee()">
                        <i class="fas fa-plus"></i> Add Employee
                    </button>
                    <input type="hidden" id="updatedEmployeeIds" name="updatedEmployeeIds" />

                    <!-- Employee selection container -->
                    <div id="employeeSelectsContainer"></div>

                    <button type="submit" class="btn btn-success w-100 mt-3">Save Employees</button>
                </form>
            </div>
        </div>
    </div>
</div>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Initialize the selected employee IDs
        let selectedEmployeeIds = [];

        // Set the minimum date for the deadline input to tomorrow
        const today = new Date();
        const tomorrow = new Date(today);
        tomorrow.setDate(today.getDate() + 1);
        const year = tomorrow.getFullYear();
        const month = ('0' + (tomorrow.getMonth() + 1)).slice(-2);
        const day = ('0' + tomorrow.getDate()).slice(-2);
        const minDate = `${year}-${month}-${day}`;
        document.getElementById('taskDeadline').setAttribute('min', minDate);

        // Success and error message handling (hides after 3 seconds)
        const successMessage = document.querySelector('.alert-success');
        const errorMessage = document.querySelector('.alert-danger');

        if (successMessage) {
            setTimeout(() => {
                successMessage.classList.add('fade');
                successMessage.classList.remove('show');
                successMessage.style.display = 'none';
            }, 3000);
        }

        if (errorMessage) {
            setTimeout(() => {
                errorMessage.classList.add('fade');
                errorMessage.classList.remove('show');
                errorMessage.style.display = 'none';
            }, 3000);
        }

        // Employee selection handling
        document.getElementById("addEmployeeBtn").addEventListener("click", addEmployee);

        // Function to load employees into the dropdown
        function loadEmployees(selectElement) {
            let employees = @Html.Raw(Json.Serialize(Model.Employees));

            selectElement.empty();
            selectElement.append(new Option('Choose Employee', '', true, true));

            employees.forEach(emp => {
                let optionText = `${emp.firstName} ${emp.lastName}`;
                let option = new Option(optionText, emp.id);
                selectElement.append(option);
            });

            selectElement.on('change', function () {
                let prevValue = $(this).data('prevValue');
                let selectedValue = $(this).val();

                // Remove previously selected employee if changed
                if (prevValue) {
                    selectedEmployeeIds = selectedEmployeeIds.filter(id => id !== prevValue);
                }

                // Add the new selected employee if it's not already in the list
                if (selectedValue && !selectedEmployeeIds.includes(selectedValue)) {
                    selectedEmployeeIds.push(selectedValue);
                    $(this).data('prevValue', selectedValue);
                }

                updateEmployeeSelections();
            });
        }

        // Function to update employee selections (disable already selected ones)
        function updateEmployeeSelections() {
            $(".employeeSelect").each(function () {
                let currentVal = $(this).val();

                $(this).find("option").each(function () {
                    let optionVal = $(this).val();
                    if (optionVal && selectedEmployeeIds.includes(optionVal) && optionVal !== currentVal) {
                        $(this).prop("disabled", true);
                    } else {
                        $(this).prop("disabled", false);
                    }
                });
            });
        }

        // Function to add a new employee select dropdown
        function addEmployee() {
            let container = $("#employeeSelectsContainer");
            let index = container.children().length;
            let div = $(`
                        <div class="d-flex gap-2 mt-2 employee-item">
                            <select class="form-select employeeSelect" name="EmployeeIds[]">
                                <option value="" disabled selected>Choose Employee</option>
                            </select>
                            <button type="button" class="btn btn-danger remove-employee">
                                <i class="fas fa-trash-alt"></i> Delete
                            </button>
                        </div>
                    `);
            container.append(div);
            loadEmployees(div.find(".employeeSelect"));
            updateEmployeeSelections();
        }

        // Handle task edit button actions (open corresponding modal)
        document.querySelectorAll('.edit-datas-btn, .edit-material-btn, .edit-employee-btn').forEach(button => {
            button.addEventListener('click', function () {
                if (this.classList.contains('edit-datas-btn')) {
                    document.getElementById('taskId').value = this.dataset.id;
                    document.getElementById('taskTitle').value = this.dataset.title;
                    document.getElementById('taskDescription').value = this.dataset.description;
                    document.getElementById('taskAssignedBy').value = this.dataset.assignedby;
                    document.getElementById('taskAssignedByPhone').value = this.dataset.assignedbyphone;
                    document.getElementById('taskAssignedByEmail').value = this.dataset.assignedbyemail;
                    document.getElementById('taskAssignedByAddress').value = this.dataset.assignedbyaddress;
                    document.getElementById('taskDeadline').value = this.dataset.deadline;
                    document.getElementById('taskPriority').value = this.dataset.priority;
                    document.getElementById('taskStatus').value = this.dataset.status;
                    $('#editTaskModal').modal('show');
                }
                else if (this.classList.contains('edit-material-btn')) {
                    console.log("Edit Material button clicked", this.dataset.material);
                }
                else if (this.classList.contains('edit-employee-btn')) {
                    const taskId = this.dataset.id;
                    const employees = JSON.parse(this.dataset.employee || "[]");

                    document.getElementById('taskEmployeeId').value = taskId;

                    const employeeSelectsContainer = document.getElementById('employeeSelectsContainer');

                    // Clear the container to avoid adding multiple selects
                    employeeSelectsContainer.innerHTML = '';

                    // Create a select box for each employee
                    employees.forEach((emp, index) => {
                        const div = document.createElement("div");
                        div.classList.add("d-flex", "gap-2", "mt-2", "employee-item");

                        const select = document.createElement("select");
                        select.classList.add("form-control");
                        select.name = "EmployeeIds[]"; // Adjust the name to match the form submission

                        const option = document.createElement("option");
                        option.value = emp.id;
                        option.textContent = emp.firstName + " " + emp.lastName;
                        select.appendChild(option);

                        const removeButton = document.createElement("button");
                        removeButton.type = "button";
                        removeButton.classList.add("btn", "btn-danger", "remove-employee");
                        removeButton.innerHTML = '<i class="fas fa-trash-alt"></i> Delete';
                        div.appendChild(select);
                        div.appendChild(removeButton);

                        employeeSelectsContainer.appendChild(div);
                    });

                    // Show the modal
                    $('#editEmployeeModal').modal('show');
                }
            });
        });

        // Remove employee from the list when delete button is clicked
        $(document).on('click', '.remove-employee', function () {
            let parentDiv = $(this).closest('.employee-item');
            let selectedEmployeeId = parentDiv.find('.employeeSelect').val();

            if (selectedEmployeeId) {
                selectedEmployeeIds = selectedEmployeeIds.filter(id => id !== selectedEmployeeId);
            }

            parentDiv.remove();
            updateEmployeeSelections();
        });

        // Gather the employee IDs before submitting the form
        function gatherEmployeeIds() {
            let employeeIds = [];
            $(".employeeSelect").each(function () {
                let selectedValue = $(this).val();
                if (selectedValue) {
                    employeeIds.push(selectedValue);
                }
            });

            // Set the updated employee IDs into the hidden input field
            const hiddenInput = document.getElementById('updatedEmployeeIds');
            hiddenInput.value = employeeIds.join(','); // Use join() to create a comma-separated string
        }

        // Trigger the gatherEmployeeIds function before form submission
        document.getElementById('editEmployeeForm').addEventListener('submit', function (e) {
            // Prevent form submission to gather employee IDs first
            e.preventDefault();

            // Call the function to gather employee IDs
            gatherEmployeeIds();

            // Check if employee IDs are set correctly
            console.log("Selected Employee IDs:", document.getElementById('updatedEmployeeIds').value);

            // Submit the form manually after the employee IDs have been gathered
            this.submit();
        });
    });
</script>






<style>
    .invalid-feedback {
        display: none;
        font-size: 0.875rem;
        color: #dc3545;
    }

    .form-control.is-invalid, .form-select.is-invalid {
        border-color: #dc3545;
    }

    .form-label {
        font-weight: bold;
    }

    .btn-success {
        background: linear-gradient(135deg, #28a745, #218838);
        border-radius: 8px;
        font-size: 18px;
        font-weight: bold;
    }

        .btn-success:hover {
            background: linear-gradient(135deg, #218838, #1e7e34);
            transform: scale(1.03);
        }
</style>