@model EConstructionApp.WebUI.Areas.Admin.Models.TaskViewModel

@{
    ViewData["Title"] = "Active Tasks";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<a href="@Url.Action("CreateTask", "Task", new { area = "Admin" })" class="btn btn-success mb-2">
    <i class="fas fa-plus"></i> Create Task
</a>

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show text-center" role="alert">
        @TempData["ErrorMessage"]
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show text-center" role="alert">
        @TempData["SuccessMessage"]
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}

@if (Model == null || Model.Tasks == null || !Model.Tasks.Any())
{
    <div class="alert alert-warning text-center">
        No active tasks found.
    </div>
}
else
{
    <div class="container mt-4">
        <div class="row">
            @foreach (var task in Model.Tasks)
            {
                <div class="col-md-6 mb-4">
                    <div class="card task-card shadow-sm h-100 d-flex flex-column">
                        <div class="card-header bg-primary text-white">
                            <h5 class="mb-0">@task.Title</h5>
                        </div>
                        <div class="card-body d-flex flex-column">
                            <p class="text-muted">@task.Description</p>

                            <div class="task-info">
                                <p><strong>📌 Assigned By:</strong> @task.AssignedBy</p>
                                <p><strong>📱 Phone:</strong> +@task.AssignedByPhone</p>
                                <p><strong>🏠 Address:</strong> @task.AssignedByAddress</p>
                                <p>
                                    <strong>⏳ Deadline:</strong> @task.Deadline.ToString("yyyy-MM-dd")
                                    <span class="text-muted">
                                        (@((task.Deadline.ToDateTime(TimeOnly.MinValue) - DateTime.Today).Days) days left)
                                    </span>
                                </p>
                                <p><strong>🔥 Priority:</strong> <span class="badge bg-danger">@task.Priority</span></p>
                                <p><strong>⚙️ Status:</strong> <span class="badge bg-success">@task.Status</span></p>
                                <p><strong>💰 Total Cost:</strong> <span class="text-success">$@task.TotalCost.ToString("N2")</span></p>
                            </div>
                            <h6 class="mt-3"><strong>👷 Employees:</strong></h6>
                            @if (task.Employees != null && task.Employees.Any())
                            {
                                <ul class="list-group list-group-flush" style="max-height: 150px; overflow-y: auto;">
                                    @foreach (var employee in task.Employees)
                                    {
                                        <li class="list-group-item">@employee.FirstName @employee.LastName [@employee.Role]</li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <p class="text-muted">No employees assigned.</p>
                            }

                            <h6 class="mt-3"><strong>🔨 Materials Used:</strong></h6>
                            @if (task.MaterialAssignments != null && task.MaterialAssignments.Any())
                            {
                                <ul class="list-group list-group-flush" style="max-height: 150px; overflow-y: auto;">
                                    @foreach (var material in task.MaterialAssignments)
                                    {
                                        <li class="list-group-item">@material.Material.Name, @material.Material.Category.Name [@material.Quantity.ToString("0") @material.Material.Measure]</li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <p class="text-muted">No materials assigned.</p>
                            }

                            <div class="d-flex flex-column mt-auto">
                                <button class="btn btn-primary mb-2 edit-datas-btn"
                                        data-id="@task.Id"
                                        data-title="@task.Title"
                                        data-description="@task.Description"
                                        data-assignedby="@task.AssignedBy"
                                        data-assignedbyphone="@task.AssignedByPhone"
                                        data-assignedbyaddress="@task.AssignedByAddress"
                                        data-deadline="@task.Deadline.ToString("yyyy-MM-dd")"
                                        data-priority="@task.Priority"
                                        data-status="@task.Status">
                                    <i class="fas fa-edit"></i> Edit Datas
                                </button>
                                <button class="btn btn-warning mb-2 edit-material-btn" data-id="@task.Id" data-material='@Html.Raw(Json.Serialize(task.MaterialAssignments))'>
                                    <i class="fas fa-box"></i> Edit Material
                                </button>
                                <button class="btn btn-success mb-2 edit-employee-btn" data-id="@task.Id" data-employee='@Html.Raw(Json.Serialize(task.Employees))'>
                                    <i class="fas fa-user-cog"></i> Edit Employee
                                </button>
                            </div>

                        </div>
                    </div>
                </div>
            }
        </div>
        @if (Model.TotalPages > 1)
        {
            <nav aria-label="Page navigation">
                <ul class="pagination justify-content-center mt-4">
                    <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                        <a class="page-link rounded-pill shadow-sm" href="@Url.Action("GetTasks", new { page = Model.CurrentPage - 1, size = 6 })">
                            « Previous
                        </a>
                    </li>
                    @for (int i = 1; i <= Model.TotalPages; i++)
                    {
                        <li class="page-item @(Model.CurrentPage == i ? "active" : "")">
                            <a class="page-link rounded-pill shadow-sm @(Model.CurrentPage == i ? "bg-primary text-white" : "")"
                               href="@Url.Action("GetTasks", new { page = i, size = 6 })">
                                @i
                            </a>
                        </li>
                    }
                    <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                        <a class="page-link rounded-pill shadow-sm" href="@Url.Action("GetTasks", new { page = Model.CurrentPage + 1, size = 6 })">
                            Next »
                        </a>
                    </li>
                </ul>
            </nav>
        }
    </div>
}




<div class="modal fade" id="editTaskModal" tabindex="-1" aria-labelledby="editTaskModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editTaskModalLabel">Edit Task</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="addTaskForm" method="post" action="@Url.Action("EditTask", "Task")">
                    <input type="hidden" id="taskId" name="Id">
                    <div class="form-group">
                        <label for="taskTitle">Title</label>
                        <input type="text" class="form-control" id="taskTitle" name="Title" minlength="5" maxlength="250" required>
                        <div class="invalid-feedback">Title must be between 5 and 250 characters.</div>
                    </div>
                    <div class="form-group">
                        <label for="taskDescription">Description</label>
                        <textarea class="form-control" id="taskDescription" name="Description" minlength="10" maxlength="1000" required></textarea>
                        <div class="invalid-feedback">Description must be between 10 and 1000 characters.</div>
                    </div>
                    <div class="form-group">
                        <label for="taskAssignedBy">Assigned By</label>
                        <input type="text" class="form-control" id="taskAssignedBy" name="AssignedBy" minlength="2" maxlength="200" required>
                        <div class="invalid-feedback">Assigned By must be between 2 and 200 characters.</div>
                    </div>
                    <div class="form-group">
                        <label for="taskAssignedByPhone">Assigned By Phone</label>
                        <input type="text" class="form-control" id="taskAssignedByPhone" name="AssignedByPhone"
                               pattern="^\d{10,15}$"
                               title="Phone number must be between 10 and 15 digits without '+' sign (e.g., 994515268342)"
                               placeholder="Enter phone number (10-15 digits)" required minlength="10" maxlength="15">
                        <div class="invalid-feedback">Valid phone number is required (10-15 digits, without "+").</div>
                    </div>
                    <div class="form-group">
                        <label for="taskAssignedByAddress">Assigned By Address</label>
                        <input type="text" class="form-control" id="taskAssignedByAddress" name="AssignedByAddress" minlength="5" maxlength="250" required>
                        <div class="invalid-feedback">Assigned By Address must be between 5 and 250 characters.</div>
                    </div>
                    <div class="form-group">
                        <label for="taskDeadline">Deadline</label>
                        <input type="date" class="form-control" id="taskDeadline" name="Deadline" required>
                        <div class="invalid-feedback">Deadline is required and must be after tomorrow.</div>
                    </div>
                    <div class="form-group">
                        <label for="taskPriority">Priority</label>
                        <select class="form-control" id="taskPriority" name="Priority" required>
                            @foreach (var priority in Model.Priorities)
                            {
                                <option value="@priority.Value">@priority.Text</option>
                            }
                        </select>
                        <div class="invalid-feedback">Priority is required.</div>
                    </div>

                    <div class="form-group">
                        <label for="taskStatus">Status</label>
                        <select class="form-control" id="taskStatus" name="Status" required>
                            @foreach (var status in Model.Statuses)
                            {
                                <option value="@status.Value">@status.Text</option>
                            }
                        </select>
                        <div class="invalid-feedback">Status is required.</div>
                    </div>

                    <button type="submit" class="btn btn-success w-100 mt-3">Save Task</button>
                </form>

            </div>
        </div>
    </div>
</div>



<div class="modal fade" id="editEmployeeModal" tabindex="-1" aria-labelledby="editEmployeeModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editEmployeeModalLabel">Edit Employees</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="editEmployeeForm" method="post" action="@Url.Action("UpdateTaskEmployees", "Task")">
                    <input type="hidden" id="taskEmployeeId" name="TaskId">
                    <button type="button" id="addEmployeeBtn" class="btn btn-secondary mb-2" onclick="addEmployee()">
                        <i class="fas fa-plus"></i> Add Employee
                    </button>
                    <input type="hidden" id="updatedEmployeeIds" name="updatedEmployeeIds" />
                    <div id="employeeSelectsContainer"></div>
                    <button type="submit" class="btn btn-success w-100 mt-3">Save Employees</button>
                </form>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="editMaterialsModal" tabindex="-1" aria-labelledby="editMaterialsModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editMaterialsModalLabel">Edit Materials</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="editMaterialsForm" method="post" action="@Url.Action("UpdateTaskMaterials", "Task")">
                    <input type="hidden" id="taskMaterialId" name="taskId">
                    <button type="button" id="addMaterialBtn" class="btn btn-secondary mb-2">
                        <i class="fas fa-plus"></i> Add Material
                    </button>
                    <input type="hidden" id="updatedMaterialIds" name="updatedMaterialIds" />
                    <div id="materialsContainer"></div>
                    <button type="submit" class="btn btn-success w-100 mt-3">Save Materials</button>
                </form>
            </div>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        let selectedMaterialIds = [];
        let selectedEmployeeIds = [];
        let removedEmployeeIds = [];
        const today = new Date();
        const tomorrow = new Date(today);
        tomorrow.setDate(today.getDate() + 1);
        const minDate = `${tomorrow.getFullYear()}-${('0' + (tomorrow.getMonth() + 1)).slice(-2)}-${('0' + tomorrow.getDate()).slice(-2)}`;
        document.getElementById('taskDeadline').setAttribute('min', minDate);

        [".alert-success", ".alert-danger"].forEach(selector => {
            const message = document.querySelector(selector);
            if (message) {
                setTimeout(() => {
                    message.classList.add('fade');
                    message.classList.remove('show');
                    message.style.display = 'none';
                }, 3000);
            }
        });

        function getMaterials() {
            return @Html.Raw(Json.Serialize(Model.Materials));
        }

        document.getElementById("addMaterialBtn").addEventListener("click", addMaterial);
        document.getElementById("addEmployeeBtn").addEventListener("click", addEmployee);
        function loadEmployees(selectElement) {
            let employees = @Html.Raw(Json.Serialize(Model.Employees));
            selectElement.empty().append(new Option('Choose Employee', '', true, true));

            employees.forEach(emp => {
                let option = new Option(`${emp.firstName} ${emp.lastName}`, emp.id);
                selectElement.append(option);
            });

            selectElement.on('change', function () {
                let prevValue = $(this).data('prevValue');
                let selectedValue = $(this).val();

                if (prevValue) selectedEmployeeIds = selectedEmployeeIds.filter(id => id !== prevValue);
                if (selectedValue && !selectedEmployeeIds.includes(selectedValue)) {
                    selectedEmployeeIds.push(selectedValue);
                    $(this).data('prevValue', selectedValue);
                }
                updateEmployeeSelections();
            });
        }
        function updateEmployeeSelections() {
            $(".employeeSelect").each(function () {
                let currentVal = $(this).val();
                $(this).find("option").each(function () {
                    let optionVal = $(this).val();
                    $(this).prop("disabled", optionVal && selectedEmployeeIds.includes(optionVal) && optionVal !== currentVal);
                });
            });
        }

        function addEmployee() {
            let container = $("#employeeSelectsContainer");
            let div = $(
                `<div class="d-flex gap-2 mt-2 employee-item">
                        <select class="form-select employeeSelect" name="EmployeeIds[]">
                            <option value="" disabled selected>Choose Employee</option>
                        </select>
                        <button type="button" class="btn btn-danger remove-employee">
                            <i class="fas fa-trash-alt"></i> Delete
                        </button>
                    </div>`
            );
            container.append(div);
            loadEmployees(div.find(".employeeSelect"));
            updateEmployeeSelections();
        }

        document.querySelectorAll('.edit-employee-btn').forEach(button => {
            button.addEventListener('click', function () {
                const taskId = this.dataset.id;
                const employees = JSON.parse(this.dataset.employee || "[]");

                document.getElementById('taskEmployeeId').value = taskId;
                const employeeSelectsContainer = document.getElementById('employeeSelectsContainer');
                employeeSelectsContainer.innerHTML = '';
                selectedEmployeeIds = [];
                removedEmployeeIds = [];

                employees.forEach(emp => {
                    selectedEmployeeIds.push(emp.id);
                    const div = document.createElement("div");
                    div.classList.add("d-flex", "gap-2", "mt-2", "employee-item");

                    const select = document.createElement("select");
                    select.classList.add("form-select", "employeeSelect");
                    select.name = "EmployeeIds[]";

                    const option = document.createElement("option");
                    option.value = emp.id;
                    option.textContent = `${emp.firstName} ${emp.lastName}`;
                    option.selected = true;
                    select.appendChild(option);

                    const removeButton = document.createElement("button");
                    removeButton.type = "button";
                    removeButton.classList.add("btn", "btn-danger", "remove-employee");
                    removeButton.innerHTML = '<i class="fas fa-trash-alt"></i> Delete';

                    div.appendChild(select);
                    div.appendChild(removeButton);
                    employeeSelectsContainer.appendChild(div);
                });

                $('#editEmployeeModal').modal('show');
            });
        });
        $(document).on('click', '.remove-employee', function () {
            let parentDiv = $(this).closest('.employee-item');
            let selectedEmployeeId = parentDiv.find('.employeeSelect').val();

            if (selectedEmployeeId) {
                selectedEmployeeIds = selectedEmployeeIds.filter(id => id !== selectedEmployeeId);
                removedEmployeeIds.push(selectedEmployeeId);
            }

            parentDiv.remove();
            updateEmployeeSelections();
        });

        document.getElementById('editEmployeeForm').addEventListener('submit', function (e) {
            e.preventDefault();
            gatherEmployeeIds();
            console.log("Selected Employee IDs:", document.getElementById('updatedEmployeeIds').value);
            this.submit();
        });
        
        function gatherEmployeeIds() {
            let employeeIds = [];
            $(".employeeSelect").each(function () {
                let selectedValue = $(this).val();
                if (selectedValue && !employeeIds.includes(selectedValue)) {
                    employeeIds.push(selectedValue);
                }
            });
            employeeIds = employeeIds.filter(id => !removedEmployeeIds.includes(id));
            document.getElementById('updatedEmployeeIds').value = employeeIds.join(',');
        }

        function loadMaterials(selectElement, selectedMaterialId = null) {
            let materials = getMaterials();
            selectElement.empty();
            selectElement.append(new Option('Choose Material', '', true, true));

            materials.forEach(mat => {
                let optionText = `${mat.name} - ${mat.category.name}`;
                let option = new Option(optionText, mat.id);
                if (selectedMaterialIds.includes(mat.id) && mat.id !== selectedMaterialId) {
                    option.disabled = true;
                }
                selectElement.append(option);
            });

            if (selectedMaterialId) {
                selectElement.val(selectedMaterialId);
            }

            selectElement.on('change', function () {
                let prevValue = $(this).data('prevValue');
                let selectedValue = $(this).val();

                if (prevValue) selectedMaterialIds = selectedMaterialIds.filter(id => id !== prevValue);
                if (selectedValue && !selectedMaterialIds.includes(selectedValue)) {
                    selectedMaterialIds.push(selectedValue);
                    $(this).data('prevValue', selectedValue);
                }
                updateMaterialSelections();
            });
        }

        function addMaterial(selectedMaterialId = null, quantity = 1) {
            let container = $("#materialsContainer");
            let index = container.children().length;
            let div = $(`
                <div class="d-flex gap-2 mt-2 material-item">
                    <select class="form-select materialSelect" name="updatedMaterials[${index}].MaterialId">
                        <option value="" disabled selected>Choose Material</option>
                    </select>
                    <input type="number" name="updatedMaterials[${index}].Quantity" class="form-control" min="1" step="1" value="${quantity}">
                    <button type="button" class="btn btn-danger remove-material">Remove</button>
                </div>
            `);
            container.append(div);
            loadMaterials(div.find(".materialSelect"), selectedMaterialId);
            updateMaterialSelections();
        }

        $(document).on('click', '.remove-material', function () {
            let parentDiv = $(this).closest('.material-item');
            let selectedMaterialId = parentDiv.find('.materialSelect').val();

            if (selectedMaterialId) {
                selectedMaterialIds = selectedMaterialIds.filter(id => id !== selectedMaterialId);
            }

            parentDiv.remove();
            updateMaterialSelections();
        });

        function updateMaterialSelections() {
            $(".materialSelect").each(function () {
                let currentVal = $(this).val();
                $(this).find("option").each(function () {
                    let optionVal = $(this).val();
                    $(this).prop("disabled", optionVal && selectedMaterialIds.includes(optionVal) && optionVal !== currentVal);
                });
            });
        }

        document.querySelectorAll('.edit-material-btn').forEach(button => {
            button.addEventListener('click', function () {
                const taskId = this.dataset.id;
                const materials = JSON.parse(this.dataset.material || "[]");

                document.getElementById('taskMaterialId').value = taskId;
                const materialsContainer = document.getElementById('materialsContainer');
                materialsContainer.innerHTML = '';
                selectedMaterialIds = [];

                materials.forEach(material => {
                    selectedMaterialIds.push(material.material.id);
                    addMaterial(material.material.id, material.quantity);
                });

                $('#editMaterialsModal').modal('show');
            });
        });

        document.getElementById('editMaterialsForm').addEventListener('submit', function (e) {
            e.preventDefault();
            let selectedMaterials = [];

            $(".material-item").each(function () {
                let materialId = $(this).find(".materialSelect").val();
                let quantity = $(this).find("input[type='number']").val();

                if (materialId) {
                    selectedMaterials.push({ MaterialId: materialId, Quantity: quantity });
                }
            });

            document.getElementById('updatedMaterialIds').value = JSON.stringify(selectedMaterials);
            console.log("Göndərilən Materiallar:", selectedMaterials);
            this.submit();
        });

        document.querySelectorAll('.edit-datas-btn').forEach(button => {
            button.addEventListener('click', function () {
                document.getElementById('taskId').value = this.dataset.id;
                document.getElementById('taskTitle').value = this.dataset.title;
                document.getElementById('taskDescription').value = this.dataset.description;
                document.getElementById('taskAssignedBy').value = this.dataset.assignedby;
                document.getElementById('taskAssignedByPhone').value = this.dataset.assignedbyphone;
                document.getElementById('taskAssignedByAddress').value = this.dataset.assignedbyaddress;
                document.getElementById('taskDeadline').value = this.dataset.deadline;
                document.getElementById('taskPriority').value = this.dataset.priority;
                document.getElementById('taskStatus').value = this.dataset.status;
                $('#editTaskModal').modal('show');
            });
        });
    });
</script>


<style>
    .invalid-feedback {
        display: none;
        font-size: 0.875rem;
        color: #dc3545;
    }

    .form-control.is-invalid, .form-select.is-invalid {
        border-color: #dc3545;
    }

    .form-label {
        font-weight: bold;
    }

    .btn-success {
        background: linear-gradient(135deg, #28a745, #218838);
        border-radius: 8px;
        font-size: 18px;
        font-weight: bold;
    }

        .btn-success:hover {
            background: linear-gradient(135deg, #218838, #1e7e34);
            transform: scale(1.03);
        }
</style>