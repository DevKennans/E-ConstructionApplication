@model EConstructionApp.WebUI.Areas.Admin.Models.CreateMaterialViewModel

@{
    ViewData["Title"] = "Add Material";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show text-center" role="alert">
        @TempData["ErrorMessage"]
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show text-center" role="alert">
        @TempData["SuccessMessage"]
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}
<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-6">
            <div class="card border-0 shadow-lg rounded-4">
                <div class="card-body p-5">
                    <form method="post" asp-action="AddMaterial" asp-controller="Material">
                        @Html.AntiForgeryToken()
                        <div class="mb-4">
                            <label for="materialName" class="form-label fs-5 fw-bold">Material Name</label>
                            <input type="text" id="materialName" name="Material.Name" class="form-control form-control-lg" placeholder="Enter material name" required minlength="2" maxlength="250" />
                        </div>
                        <div class="mb-4">
                            <label for="stockCount" class="form-label fs-5 fw-bold">Stock Count</label>
                            <input type="number" id="stockCount" name="Material.StockQuantity" class="form-control form-control-lg" placeholder="Enter stock count" required min="1" step="1"/>
                        </div>
                        <div class="mb-4">
                            <label for="materialPrice" class="form-label fs-5 fw-bold">Material Price ($)</label>
                            <input type="number" id="materialPrice" name="Material.Price" class="form-control form-control-lg" placeholder="Enter material price" step="0.01" required min="0.01"/>
                        </div>
                        <div class="mb-4">
                            <label for="materialCategory" class="form-label fs-5 fw-bold">Material Category</label>
                            <div class="custom-select-container">
                                @if (Model?.Categories != null && Model.Categories.Any())
                                {
                                    <select id="materialCategory" name="Material.CategoryId" class="form-select form-select-lg" required>
                                        <option value="" disabled selected>Select a category</option>
                                        @foreach (var category in Model.Categories)
                                        {
                                            <option value="@category.Id">
                                                @category.Name
                                            </option>
                                        }
                                    </select>
                                }
                                else
                                {
                                    <p class="text-danger">No categories available.</p>
                                }
                            </div>
                        </div>
                        <div class="mb-4">
                            <label for="materialMeasure" class="form-label fs-5 fw-bold">Material Measure</label>
                            <div class="custom-select-container">
                                <select id="materialMeasure" name="Material.Measure" class="form-select form-select-lg" required>
                                    <option value="" disabled selected>Select a measure</option>
                                    @foreach (var measure in Model.MeasureList)
                                    {
                                        <option value="@measure.Value">@measure.Text</option>
                                    }
                                </select>
                            </div>
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-gradient btn-lg shadow-sm fw-bold">Add Material</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .btn-gradient {
        background: linear-gradient(45deg, #6c63ff, #6c757d);
        color: white;
        transition: background 0.3s ease;
    }

        .btn-gradient:hover {
            background: linear-gradient(45deg, #5755d9, #5a636e);
            transition-delay: 0.5s;
        }

    .card {
        background-color: #ffffff;
        border-radius: 15px;
        box-shadow: 0px 10px 20px rgba(0, 0, 0, 0.1);
    }

    .form-control, .form-select {
        border-radius: 8px;
        border: 1px solid #ddd;
        transition: border-color 0.3s ease;
    }

        .form-control:focus, .form-select:focus {
            border-color: #6c63ff;
            box-shadow: 0 0 0 0.25rem rgba(108, 99, 255, 0.25);
        }

    .custom-select-container {
        position: relative;
    }

    .form-select {
        background-color: #f8f9fa;
        padding: 10px 15px;
        font-size: 1rem;
        transition: background-color 0.3s ease, border-color 0.3s ease;
    }

        .form-select:focus {
            background-color: #ffffff;
        }

        .form-select option {
            padding: 10px;
            background-color: #f8f9fa;
        }

        .form-select:hover {
            background-color: #e9ecef;
        }
</style>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const successMessage = document.querySelector('.alert-success');
        const errorMessage = document.querySelector('.alert-danger');

        if (successMessage) {
            setTimeout(() => {
                successMessage.classList.add('fade');
                successMessage.classList.remove('show');
                successMessage.style.display = 'none';
            }, 3000);
        }

        if (errorMessage) {
            setTimeout(() => {
                errorMessage.classList.add('fade');
                errorMessage.classList.remove('show');
                errorMessage.style.display = 'none';
            }, 3000);
        }
    });

</script>